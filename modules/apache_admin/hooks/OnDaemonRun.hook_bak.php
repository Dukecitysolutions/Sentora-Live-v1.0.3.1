<?php


//ssl port
$sslport = "443";

echo fs_filehandler::NewLine() . "START Apache Config Hook." . fs_filehandler::NewLine();
if (ui_module::CheckModuleEnabled('Apache Config')) {
    echo "Apache Admin module ENABLED..." . fs_filehandler::NewLine();
    TriggerApacheQuotaUsage();
    if (ctrl_options::GetSystemOption('apache_changed') == strtolower("true")) {
        echo "Apache Config has changed..." . fs_filehandler::NewLine();
        if (ctrl_options::GetSystemOption('apache_backup') == strtolower("true")) {
            echo "Backing up Apache Config to: " . ctrl_options::GetSystemOption('apache_budir') . fs_filehandler::NewLine();
            BackupVhostConfigFile();
			
			//add ssl vhost backup
			BackupSslVhostConfigFile();
        }
        echo "Begin writing Apache Config to: " . ctrl_options::GetSystemOption('apache_vhost') . fs_filehandler::NewLine();
        WriteVhostConfigFile();
		//begin to write ssl vhost files
		echo "Begin writing Apache Config to: " . ctrl_options::GetSystemOption('apache_ssl_vhost') . fs_filehandler::NewLine();
        WriteSslVhostConfigFile();
		
		//Restart remote servers
		#echo "Begin writing Apache Config to: " . ctrl_options::GetSystemOption('apache_ssl_vhost') . fs_filehandler::NewLine();
		#RestartRemoteServers ();
		
		//begin to write Haproxy Config files
		#echo "Begin writing Haproxy Config " . fs_filehandler::NewLine();
       # WriteHaproxyConfig();
		
    } else {
        echo "Apache Config has NOT changed...nothing to do." . fs_filehandler::NewLine();
    }
} else {
    echo "Apache Admin module DISABLED...nothing to do." . fs_filehandler::NewLine();
}
echo "END Apache Config Hook." . fs_filehandler::NewLine();

/**
 *
 * @param string $vhostName
 * @param numeric $customPort
 * @param string $userEmail[5~ * @return string
 *
 */
function BuildVhostPortForward($vhostName, $sslenabled, $customPort, $userEmail)
{
	if ($sslenabled == !null) {
		$customPort_in = 443;
	} else {
		
		$customPort_in = $customPort;
	};
	
    $line = fs_filehandler::NewLine() . fs_filehandler::NewLine();
    $line .= "# DOMAIN: " . $vhostName . fs_filehandler::NewLine();
    $line .= "# PORT FORWARD FROM 80 TO: " . $customPort_in . fs_filehandler::NewLine();
    $line .= "<virtualhost 0.0.0.0:80>" . fs_filehandler::NewLine();
    $line .= "ServerName " . $vhostName . fs_filehandler::NewLine();
    $line .= "ServerAlias www." . $vhostName . fs_filehandler::NewLine();
    $line .= "ServerAdmin " . $userEmail . fs_filehandler::NewLine();
    $line .= "RewriteEngine on" . fs_filehandler::NewLine();
    $line .= "ReWriteCond %{SERVER_PORT} !^" . $customPort_in . "$" . fs_filehandler::NewLine();
    $line .= ( $customPort_in === "443" ) ? "RewriteRule ^/(.*) https://%{HTTP_HOST}/$1 [NC,R,L] " . fs_filehandler::NewLine() : "RewriteRule ^/(.*) http://%{HTTP_HOST}:" . $customPort . "/$1 [NC,R,L] " . fs_filehandler::NewLine();
    $line .= "</virtualhost>" . fs_filehandler::NewLine();
    $line .= "# END DOMAIN: " . $vhostName . fs_filehandler::NewLine() . fs_filehandler::NewLine();

    return $line;
}

function WriteVhostConfigFile()
{
    global $zdbh;

    //Get email for server admin of Sentora
    $getserveremail = $zdbh->query("SELECT ac_email_vc FROM x_accounts where ac_id_pk=1")->fetch();
    $serveremail = ( $getserveremail['ac_email_vc'] != "" ) ? $getserveremail['ac_email_vc'] : "postmaster@" . ctrl_options::GetSystemOption('sentora_domain');

    $VHostDefaultPort = ctrl_options::GetSystemOption('apache_port');
    $customPorts = array(ctrl_options::GetSystemOption('sentora_port'));
    $portQuery = $zdbh->prepare("SELECT vh_custom_port_in FROM x_vhosts WHERE vh_deleted_ts IS NULL");
    $portQuery->execute();
    while ($rowport = $portQuery->fetch()) {
        $customPorts[] = (empty($rowport['vh_custom_port_in'])) ? $VHostDefaultPort : $rowport['vh_custom_port_in'];
    }
    $customPortList = array_unique($customPorts);

    /*
     * ###########################################################################?###################################
     * #
     * # Default Virtual Host Container
     * #
     * ###########################################################################?###################################
     */

    $line = "################################################################" . fs_filehandler::NewLine();
    $line .= "# Apache VHOST configuration file" . fs_filehandler::NewLine();
    $line .= "# Automatically generated by Sentora " . sys_versions::ShowSentoraVersion() . fs_filehandler::NewLine();
    $line .= "# Generated on: " . date(ctrl_options::GetSystemOption('sentora_df'), time()) . fs_filehandler::NewLine();
    $line .= "#==== YOU MUST NOT EDIT THIS FILE : IT WILL BE OVERWRITTEN ====" . fs_filehandler::NewLine();
    $line .= "# Use Sentora Menu -> Admin -> Module Admin -> Apache config" . fs_filehandler::NewLine();
    $line .= "################################################################" . fs_filehandler::NewLine();
    $line .= fs_filehandler::NewLine();


    # Listen is mandatory for each port <> 80 (80 is defined in system config)
    foreach ($customPortList as $port) {
        $line .= "Listen " . $port . fs_filehandler::NewLine();
    }

    $line .= fs_filehandler::NewLine();
    $line .= "# Configuration for Sentora control panel." . fs_filehandler::NewLine();
    $line .= "<VirtualHost *:" . ctrl_options::GetSystemOption('sentora_port') . ">" . fs_filehandler::NewLine();
    $line .= "ServerAdmin " . $serveremail . fs_filehandler::NewLine();
    $line .= 'DocumentRoot "' . ctrl_options::GetSystemOption('sentora_root') . '"' . fs_filehandler::NewLine();
    $line .= "ServerName " . ctrl_options::GetSystemOption('sentora_domain') . fs_filehandler::NewLine();
    $line .= 'ErrorLog "' . ctrl_options::GetSystemOption('log_dir') . 'sentora-error.log" ' . fs_filehandler::NewLine();
    $line .= 'CustomLog "' . ctrl_options::GetSystemOption('log_dir') . 'sentora-access.log" ' . ctrl_options::GetSystemOption('access_log_format') . fs_filehandler::NewLine();
    $line .= 'CustomLog "' . ctrl_options::GetSystemOption('log_dir') . 'sentora-bandwidth.log" ' . ctrl_options::GetSystemOption('bandwidth_log_format') . fs_filehandler::NewLine();
    $line .= "AddType application/x-httpd-php .php" . fs_filehandler::NewLine();
    

	// Error documents:- Error pages are added automatically if they are found in the /etc/static/errorpages
	// directory and if they are a valid error code, and saved in the proper format, i.e. <error_number>.html
	$errorpages = ctrl_options::GetSystemOption('sentora_root') . "/etc/static/errorpages";
	if (is_dir($errorpages)) {
		if ($handle = opendir($errorpages)) {
			while (($file = readdir($handle)) !== false) {
				if ($file != "." && $file != "..") {
					$page = explode(".", $file);
					if (!fs_director::CheckForEmptyValue(CheckErrorDocument($page[0]))) {
						$line .= "ErrorDocument " . $page[0] . " /etc/static/errorpages/" . $page[0] . ".html" . fs_filehandler::NewLine();
					}
				}
			}
			closedir($handle);
		}
	}



    $line .= '<Directory "' . ctrl_options::GetSystemOption('sentora_root') . '">' . fs_filehandler::NewLine();
    $line .= "Options +FollowSymLinks -Indexes" . fs_filehandler::NewLine();
    $line .= "    AllowOverride All" . fs_filehandler::NewLine();

    if ((double) sys_versions::ShowApacheVersion() < 2.4) {
        $line .= "    Require all granted" . fs_filehandler::NewLine();
    } else {
        $line .= "    Require all granted" . fs_filehandler::NewLine();
    }

    $line .= "</Directory>" . fs_filehandler::NewLine();
    $line .= fs_filehandler::NewLine();
    $line .= "# Custom settings are loaded below this line (if any exist)" . fs_filehandler::NewLine();

    // Global custom Sentora entry
    $line .= ctrl_options::GetSystemOption('global_zpcustom') . fs_filehandler::NewLine();

    $line .= "</VirtualHost>" . fs_filehandler::NewLine();

    $line .= fs_filehandler::NewLine();
    $line .= "################################################################" . fs_filehandler::NewLine();
    $line .= "# Sentora generated VHOST configurations below....." . fs_filehandler::NewLine();
    $line .= "################################################################" . fs_filehandler::NewLine();
    $line .= fs_filehandler::NewLine();

    /*
     * ##############################################################################################################
     * #
     * # All Virtual Host Containers
     * #
     * ##############################################################################################################
     */

    // Sentora virtual host container configuration
    $sql = $zdbh->prepare("SELECT * FROM x_vhosts WHERE vh_deleted_ts IS NULL");
    $sql->execute();
    while ($rowvhost = $sql->fetch()) {

        // Grab some variables we will use for later...
        $vhostuser = ctrl_users::GetUserDetail($rowvhost['vh_acc_fk']);
        $bandwidth = ctrl_users::GetQuotaUsages('bandwidth', $vhostuser['userid']);
        $diskspace = ctrl_users::GetQuotaUsages('diskspace', $vhostuser['userid']);
        // Set the vhosts to "LIVE"
        $vsql = $zdbh->prepare("UPDATE x_vhosts SET vh_active_in=1 WHERE vh_id_pk=:id");
        $vsql->bindParam(':id', $rowvhost['vh_id_pk']);
        $vsql->execute();

        // Add a default email if no email found for client.
        $useremail = ( fs_director::CheckForEmptyValue($vhostuser['email']) ) ? "postmaster@" . $rowvhost['vh_name_vc'] : $vhostuser['email'];

        // Check if domain or subdomain to see if we add an alias with 'www'
        $serveralias = ( $rowvhost['vh_type_in'] == 2 ) ? '' : " www." . $rowvhost['vh_name_vc'];


		//Check if site is ssl enabled to pevent duplicate Port 443
        if ($rowvhost['vh_ssl_tx'] == !null) {
			
			$vhostPort = $VHostDefaultPort;
		} else {
			
			$vhostPort = ( fs_director::CheckForEmptyValue($rowvhost['vh_custom_port_in']) ) ? $VHostDefaultPort : $rowvhost['vh_custom_port_in'];
		};


        $vhostIp = ( fs_director::CheckForEmptyValue($rowvhost['vh_custom_ip_vc']) ) ? "*" : $rowvhost['vh_custom_ip_vc'];

        //Domain is enabled
        //Line1: Domain enabled & Client also is enabled.
        //Line2: Domain enabled & Client may be disabled, but 'Allow Disabled' = 'true' in apache settings.
        if ($rowvhost['vh_enabled_in'] == 1 && ctrl_users::CheckUserEnabled($rowvhost['vh_acc_fk']) ||
            $rowvhost['vh_enabled_in'] == 1 && ctrl_options::GetSystemOption('apache_allow_disabled') == strtolower("true")) {

            /*
             * ##################################################
             * #
             * # Disk Quotas Check
             * #
             * ##################################################
             */

            //Domain is beyond its diskusage
            if ($vhostuser['diskquota'] != 0 && $diskspace > $vhostuser['diskquota']) {
                $line .= "# DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "# THIS DOMAIN HAS BEEN DISABLED FOR QUOTA OVERAGE" . fs_filehandler::NewLine();
                $line .= "<virtualhost " . $vhostIp . ":" . $vhostPort . ">" . fs_filehandler::NewLine();
                $line .= "ServerName " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "ServerAlias www." . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "ServerAdmin " . $useremail . fs_filehandler::NewLine();
                $line .= 'DocumentRoot "' . ctrl_options::GetSystemOption('static_dir') . 'diskexceeded"' . fs_filehandler::NewLine();
                $line .= '<Directory "' . ctrl_options::GetSystemOption('static_dir') . 'diskexceeded">' . fs_filehandler::NewLine();
                $line .= "  Options +FollowSymLinks -Indexes" . fs_filehandler::NewLine();
                $line .= "  AllowOverride All" . fs_filehandler::NewLine();
                $line .= "  Require all granted" . fs_filehandler::NewLine();
                $line .= "</Directory>" . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('php_handler') . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('dir_index') . fs_filehandler::NewLine();
                $line .= "</virtualhost>" . fs_filehandler::NewLine();
                $line .= "# END DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "################################################################" . fs_filehandler::NewLine();
                $line .= fs_filehandler::NewLine();
                if ($rowvhost['vh_portforward_in'] <> 0) {
                    $line .= BuildVhostPortForward($rowvhost['vh_name_vc'], $vhostPort, $useremail);
                }
                $line .= fs_filehandler::NewLine();
                /*
                 * ##################################################
                 * #
                 * # Bandwidth Quotas Check
                 * #
                 * ##################################################
                 */

                //Domain is beyond its quota
            } elseif ($vhostuser['bandwidthquota'] != 0 && $bandwidth > $vhostuser['bandwidthquota']) {
                $line .= "# DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "# THIS DOMAIN HAS BEEN DISABLED FOR BANDWIDTH OVERAGE" . fs_filehandler::NewLine();
                $line .= "<virtualhost " . $vhostIp . ":" . $vhostPort . ">" . fs_filehandler::NewLine();
                $line .= "ServerName " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "ServerAlias www." . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "ServerAdmin " . $useremail . fs_filehandler::NewLine();
                $line .= 'DocumentRoot "' . ctrl_options::GetSystemOption('static_dir') . 'bandwidthexceeded"' . fs_filehandler::NewLine();
                $line .= '<Directory "' . ctrl_options::GetSystemOption('static_dir') . 'bandwidthexceeded">' . fs_filehandler::NewLine();
                $line .= "  Options +FollowSymLinks -Indexes" . fs_filehandler::NewLine();
                $line .= "  AllowOverride All" . fs_filehandler::NewLine();
                $line .= "  Require all granted" . fs_filehandler::NewLine();
                $line .= "</Directory>" . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('php_handler') . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('dir_index') . fs_filehandler::NewLine();
                $line .= "</virtualhost>" . fs_filehandler::NewLine();
                $line .= "# END DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "################################################################" . fs_filehandler::NewLine();
                $line .= fs_filehandler::NewLine();
                if ($rowvhost['vh_portforward_in'] <> 0) {
                    $line .= BuildVhostPortForward($rowvhost['vh_name_vc'], $vhostPort, $useremail);
                }
                $line .= fs_filehandler::NewLine();
                /*
                 * ##################################################
                 * #
                 * # Parked Domain
                 * #
                 * ##################################################
                 */

                //Domain is a PARKED domain.
            } elseif ($rowvhost['vh_type_in'] == 3) {
                $line .= "# DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "<virtualhost " . $vhostIp . ":" . $vhostPort . ">" . fs_filehandler::NewLine();
                $line .= "ServerName " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "ServerAlias www." . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "ServerAdmin " . $useremail . fs_filehandler::NewLine();
                $line .= 'DocumentRoot "' . ctrl_options::GetSystemOption('parking_path') . '"' . fs_filehandler::NewLine();
                $line .= '<Directory "' . ctrl_options::GetSystemOption('parking_path') . '">' . fs_filehandler::NewLine();
                $line .= "  Options +FollowSymLinks -Indexes" . fs_filehandler::NewLine();
                $line .= "  AllowOverride All" . fs_filehandler::NewLine();
                $line .= "  Require all granted" . fs_filehandler::NewLine();
                $line .= "</Directory>" . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('php_handler') . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('dir_index') . fs_filehandler::NewLine();
                $line .= "# Custom Global Settings (if any exist)" . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('global_vhcustom') . fs_filehandler::NewLine();
                $line .= "# Custom VH settings (if any exist)" . fs_filehandler::NewLine();
                $line .= $rowvhost['vh_custom_tx'] . fs_filehandler::NewLine();
                $line .= "</virtualhost>" . fs_filehandler::NewLine();
                $line .= "# END DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "################################################################" . fs_filehandler::NewLine();
                $line .= fs_filehandler::NewLine();
                if ($rowvhost['vh_portforward_in'] <> 0) {
                    $line .= BuildVhostPortForward($rowvhost['vh_name_vc'], $vhostPort, $useremail);
                }
                $line .= fs_filehandler::NewLine();
                /*
                 * ##################################################
                 * #
                 * # Regular or Sub domain
                 * #
                 * ##################################################
                 */


				//checo
                //Domain is a regular domain or a subdomain.
            } else {
                $RootDir = '"' . ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] . '/public_html' . $rowvhost['vh_directory_vc'] . '"';

                $line .= "# DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "<virtualhost " . $vhostIp . ":" . $vhostPort . ">" . fs_filehandler::NewLine();

                /*
                 * todo
                 */
                // Bandwidth Settings
                //$line .= "Include C:/Sentora/bin/apache/conf/mod_bw/mod_bw/mod_bw_Administration.conf" . fs_filehandler::NewLine();
                // Server name, alias, email settings
                $line .= "ServerName " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                if (!empty($serveralias))
                    $line .= "ServerAlias " . $serveralias . fs_filehandler::NewLine();
                $line .= "ServerAdmin " . $useremail . fs_filehandler::NewLine();
                // Document root

                $line .= 'DocumentRoot ' . $RootDir . fs_filehandler::NewLine();
                // Get Package openbasedir and suhosin enabled options
                if (ctrl_options::GetSystemOption('use_openbase') == "true") {
                    if ($rowvhost['vh_obasedir_in'] <> 0) {
                        $line .= 'php_admin_value open_basedir "' . ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] . "/public_html" . $rowvhost['vh_directory_vc'] . ctrl_options::GetSystemOption('openbase_seperator') . ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] . "/tmp" . ctrl_options::GetSystemOption('openbase_seperator') . ctrl_options::GetSystemOption('openbase_temp') . '"' . fs_filehandler::NewLine();
                    }
                }
                if (ctrl_options::GetSystemOption('use_suhosin') == "true") {
                    if ($rowvhost['vh_suhosin_in'] <> 0) {
                        $line .= ctrl_options::GetSystemOption('suhosin_value') . fs_filehandler::NewLine();
                    }
                }
				
				// Temp
                if ( !is_dir( ctrl_options::GetSystemOption('hosted_dir') . $vhostuser[ 'username' ] . "/tmp" ) ) {
                    fs_director::CreateDirectory( ctrl_options::GetSystemOption( 'hosted_dir' ) . $vhostuser[ 'username' ] . "/tmp" );
                }
				$line .= "	php_admin_value upload_tmp_dir \"" . ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] . "/tmp" . "\"" . fs_filehandler::NewLine();
				$line .= "	php_admin_value session.save_path \"" . ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] . "/tmp" . "\"" . fs_filehandler::NewLine();
				
                // Logs
                if (!is_dir(ctrl_options::GetSystemOption('log_dir_domain') . "domains/" . $vhostuser['username'] . "/")) {
                    fs_director::CreateDirectory(ctrl_options::GetSystemOption('log_dir_domain') . "domains/" . $vhostuser['username'] . "/");
                }
                $line .= 'ErrorLog "' . ctrl_options::GetSystemOption('log_dir_domain') . "domains/" . $vhostuser['username'] . "/" . $rowvhost['vh_name_vc'] . '-error.log" ' . fs_filehandler::NewLine();
                $line .= 'CustomLog "' . ctrl_options::GetSystemOption('log_dir_domain') . "domains/" . $vhostuser['username'] . "/" . $rowvhost['vh_name_vc'] . '-access.log" ' . ctrl_options::GetSystemOption('access_log_format') . fs_filehandler::NewLine();
                $line .= 'CustomLog "' . ctrl_options::GetSystemOption('log_dir_domain') . "domains/" . $vhostuser['username'] . "/" . $rowvhost['vh_name_vc'] . '-bandwidth.log" ' . ctrl_options::GetSystemOption('bandwidth_log_format') . fs_filehandler::NewLine();

                // Directory options
                $line .= '<Directory ' . $RootDir . '>' . fs_filehandler::NewLine();
                $line .= "  Options +FollowSymLinks -Indexes" . fs_filehandler::NewLine();
                $line .= "  AllowOverride All" . fs_filehandler::NewLine();
                $line .= "  Require all granted" . fs_filehandler::NewLine();
                $line .= "</Directory>" . fs_filehandler::NewLine();

		 // Enable Gzip until we set this as an option , we might commenbt this too and allow manual switch
		$line .= "AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript application/javascript" . fs_filehandler::NewLine();

                // Get Package php and cgi enabled options
                $rows = $zdbh->prepare("SELECT * FROM x_packages WHERE pk_id_pk=:packageid AND pk_deleted_ts IS NULL");
                $rows->bindParam(':packageid', $vhostuser['packageid']);
                $rows->execute();
                $packageinfo = $rows->fetch();
                if ($packageinfo['pk_enablephp_in'] <> 0) {
                    $line .= ctrl_options::GetSystemOption('php_handler') . fs_filehandler::NewLine();
                }
# curently disabled because un secure
# need correct cleaning in interface for full removal or in comment here until restoration
#                if ( $packageinfo[ 'pk_enablecgi_in' ] <> 0 ) {
#                     $line .= ctrl_options::GetSystemOption( 'cgi_handler' ) . fs_filehandler::NewLine();
#                     if ( !is_dir( ctrl_options::GetSystemOption( 'hosted_dir' ) . $vhostuser[ 'username' ] . "/public_html" . $rowvhost[ 'vh_directory_vc' ] . "/_cgi-bin" ) ) {
#                         fs_director::CreateDirectory( ctrl_options::GetSystemOption( 'hosted_dir' ) . $vhostuser[ 'username' ] . "/public_html" . $rowvhost[ 'vh_directory_vc' ] . "/_cgi-bin" );
#                     }
#                 }
                // Error documents:- Error pages are added automatically if they are found in the _errorpages directory
                // and if they are a valid error code, and saved in the proper format, i.e. <error_number>.html
                $errorpages = ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] . "/public_html" . $rowvhost['vh_directory_vc'] . "/_errorpages";
                if (is_dir($errorpages)) {
                    if ($handle = opendir($errorpages)) {
                        while (($file = readdir($handle)) !== false) {
                            if ($file != "." && $file != "..") {
                                $page = explode(".", $file);
                                if (!fs_director::CheckForEmptyValue(CheckErrorDocument($page[0]))) {
                                    $line .= "ErrorDocument " . $page[0] . " /_errorpages/" . $page[0] . ".html" . fs_filehandler::NewLine();
                                }
                            }
                        }
                        closedir($handle);
                    }
                }

                // Directory indexes
                $line .= ctrl_options::GetSystemOption('dir_index') . fs_filehandler::NewLine();

                // Global custom global vh entry
                $line .= "# Custom Global Settings (if any exist)" . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('global_vhcustom') . fs_filehandler::NewLine();

                // Client custom vh entry
                $line .= "# Custom VH settings (if any exist)" . fs_filehandler::NewLine();
                $line .= $rowvhost['vh_custom_tx'] . fs_filehandler::NewLine();

                // End Virtual Host Settings
                $line .= "</virtualhost>" . fs_filehandler::NewLine();
                $line .= "# END DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "################################################################" . fs_filehandler::NewLine();
                $line .= fs_filehandler::NewLine();
                if ($rowvhost['vh_portforward_in'] <> 0) {
                    $line .= BuildVhostPortForward($rowvhost['vh_name_vc'],$rowvhost['vh_ssl_tx'], $vhostPort, $useremail);
                }
                $line .= fs_filehandler::NewLine();
            }

            /*
             * ##################################################
             * #
             * # Disabled domain
             * #
             * ##################################################
             */
        } else {
            //Domain is NOT enabled
            $line .= "# DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
            $line .= "# THIS DOMAIN HAS BEEN DISABLED" . fs_filehandler::NewLine();
            $line .= "<virtualhost " . $vhostIp . ":" . $vhostPort . ">" . fs_filehandler::NewLine();
            $line .= "ServerName " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
            $line .= "ServerAlias www." . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
            $line .= "ServerAdmin " . $useremail . fs_filehandler::NewLine();
            $line .= 'DocumentRoot "' . ctrl_options::GetSystemOption('static_dir') . 'disabled"' . fs_filehandler::NewLine();
            $line .= '<Directory "' . ctrl_options::GetSystemOption('static_dir') . 'disabled">' . fs_filehandler::NewLine();
            $line .= "  Options +FollowSymLinks -Indexes" . fs_filehandler::NewLine();
            $line .= "  AllowOverride All" . fs_filehandler::NewLine();
            $line .= "  Require all granted" . fs_filehandler::NewLine();
            $line .= "</Directory>" . fs_filehandler::NewLine();
            $line .= ctrl_options::GetSystemOption('dir_index') . fs_filehandler::NewLine();
            $line .= "</virtualhost>" . fs_filehandler::NewLine();
            $line .= "# END DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
            $line .= "################################################################" . fs_filehandler::NewLine();
        }
    }

    /*
     * ##############################################################################################################
     * #
     * # Write vhost file to disk
     * #
     * ##############################################################################################################
     */

    // write the vhost config file
    $vhconfigfile = ctrl_options::GetSystemOption('apache_vhost');
    if (fs_filehandler::UpdateFile($vhconfigfile, 0777, $line)) {
        // Reset Apache settings to reflect that config file has been written, until the next change.
        $time = time();
        $vsql = $zdbh->prepare("UPDATE x_settings
                                    SET so_value_tx=:time
                                    WHERE so_name_vc='apache_changed'");
        $vsql->bindParam(':time', $time);
        $vsql->execute();
        echo "Finished writting Apache Config... Now reloading Apache..." . fs_filehandler::NewLine();

        $returnValue = 0;

        if (sys_versions::ShowOSPlatformVersion() == "Windows") {
            system("" . ctrl_options::GetSystemOption('httpd_exe') . " " . ctrl_options::GetSystemOption('apache_restart') . "", $returnValue);
        } else {
            $command = ctrl_options::GetSystemOption('zsudo');
            $args = array(
                "service",
                ctrl_options::GetSystemOption('apache_sn'),
                ctrl_options::GetSystemOption('apache_restart')
            );
            $returnValue = ctrl_system::systemCommand($command, $args);
        }

        echo "Apache reload " . ((0 === $returnValue ) ? "suceeded" : "failed") . "." . fs_filehandler::NewLine();
    } else {
        return false;
    }
}


/*
  * ###########################################################################?###################################
  * #
  * # Write SSL vhost files and restart srever
  * #
  * ###########################################################################?###################################
*/

function WriteSslVhostConfigFile()
{
    global $zdbh;

    //Get email for server admin of Sentora
    $getserveremail = $zdbh->query("SELECT ac_email_vc FROM x_accounts where ac_id_pk=1")->fetch();
    $serveremail = ( $getserveremail['ac_email_vc'] != "" ) ? $getserveremail['ac_email_vc'] : "postmaster@" . ctrl_options::GetSystemOption('sentora_domain');

    $VHostDefaultPort = ctrl_options::GetSystemOption('apache_port');
    $customPorts = array(ctrl_options::GetSystemOption('sentora_port'));
    $portQuery = $zdbh->prepare("SELECT vh_custom_port_in FROM x_vhosts WHERE vh_deleted_ts IS NULL");
    $portQuery->execute();
    while ($rowport = $portQuery->fetch()) {
        $customPorts[] = (empty($rowport['vh_custom_port_in'])) ? $VHostDefaultPort : $rowport['vh_custom_port_in'];
    }
    $customPortList = array_unique($customPorts);
	

    /*
     * ###########################################################################?###################################
     * #
     * # Default SSL Virtual Host Container
     * #
     * ###########################################################################?###################################
     */

    $line = "################################################################" . fs_filehandler::NewLine();
    $line .= "# Apache VHOST configuration file" . fs_filehandler::NewLine();
    $line .= "# Automatically generated by Sentora " . sys_versions::ShowSentoraVersion() . fs_filehandler::NewLine();
    $line .= "# Generated on: " . date(ctrl_options::GetSystemOption('sentora_df'), time()) . fs_filehandler::NewLine();
    $line .= "#==== YOU MUST NOT EDIT THIS FILE : IT WILL BE OVERWRITTEN ====" . fs_filehandler::NewLine();
    $line .= "# Use Sentora Menu -> Admin -> Module Admin -> Apache config" . fs_filehandler::NewLine();
    $line .= "################################################################" . fs_filehandler::NewLine();
    $line .= fs_filehandler::NewLine();


    # Listen is mandatory for each port <> 80 (80 is defined in system config)
    /*foreach ($customPortList as $port) {
        $line .= "Listen " . $port . fs_filehandler::NewLine();
    }
	*/

    $line .= fs_filehandler::NewLine();
    $line .= "# Configuration for Sentora control panel." . fs_filehandler::NewLine();
    $line .= "<VirtualHost *:443>" . fs_filehandler::NewLine();
    $line .= "ServerAdmin " . $serveremail . fs_filehandler::NewLine();
    $line .= 'DocumentRoot "' . ctrl_options::GetSystemOption('sentora_root') . '"' . fs_filehandler::NewLine();
    $line .= "ServerName " . ctrl_options::GetSystemOption('sentora_domain') . fs_filehandler::NewLine();
    $line .= 'ErrorLog "' . ctrl_options::GetSystemOption('log_dir') . 'sentora-error.log" ' . fs_filehandler::NewLine();
    $line .= 'CustomLog "' . ctrl_options::GetSystemOption('log_dir') . 'sentora-access.log" ' . ctrl_options::GetSystemOption('access_log_format') . fs_filehandler::NewLine();
    $line .= 'CustomLog "' . ctrl_options::GetSystemOption('log_dir') . 'sentora-bandwidth.log" ' . ctrl_options::GetSystemOption('bandwidth_log_format') . fs_filehandler::NewLine();
    $line .= "AddType application/x-httpd-php .php" . fs_filehandler::NewLine();
	
	// Error documents:- Error pages are added automatically if they are found in the /etc/static/errorpages
	// directory and if they are a valid error code, and saved in the proper format, i.e. <error_number>.html
	$errorpages = ctrl_options::GetSystemOption('sentora_root') . "/etc/static/errorpages";
	if (is_dir($errorpages)) {
		if ($handle = opendir($errorpages)) {
			while (($file = readdir($handle)) !== false) {
				if ($file != "." && $file != "..") {
					$page = explode(".", $file);
					if (!fs_director::CheckForEmptyValue(CheckErrorDocument($page[0]))) {
						$line .= "ErrorDocument " . $page[0] . " /etc/static/errorpages/" . $page[0] . ".html" . fs_filehandler::NewLine();
					}
				}
			}
			closedir($handle);
		}
	}	
	
    $line .= '<Directory "' . ctrl_options::GetSystemOption('sentora_root') . '">' . fs_filehandler::NewLine();
    $line .= "Options +FollowSymLinks -Indexes" . fs_filehandler::NewLine();
    $line .= "    AllowOverride All" . fs_filehandler::NewLine();

    if ((double) sys_versions::ShowApacheVersion() < 2.4) {
        $line .= "    Require all granted" . fs_filehandler::NewLine();
    } else {
        $line .= "    Require all granted" . fs_filehandler::NewLine();
    }

    $line .= "</Directory>" . fs_filehandler::NewLine();
    $line .= fs_filehandler::NewLine();
    $line .= "# Custom settings are loaded below this line (if any exist)" . fs_filehandler::NewLine();
	
	//SSL engine settings
	$line .= "# SSL Engine settings (if any exist)" . fs_filehandler::NewLine();
	$line .= ctrl_options::GetSystemOption('apache_ssl_tx') . fs_filehandler::NewLine();
	$line .= "# END SSL Engine settings (if any exist)" . fs_filehandler::NewLine();
	// END SSL engine settings
	
    // Global custom Sentora entry
    $line .= ctrl_options::GetSystemOption('global_zpcustom') . fs_filehandler::NewLine();

    $line .= "</VirtualHost>" . fs_filehandler::NewLine();

    $line .= fs_filehandler::NewLine();
    $line .= "################################################################" . fs_filehandler::NewLine();
    $line .= "# Sentora generated VHOST configurations below....." . fs_filehandler::NewLine();
    $line .= "################################################################" . fs_filehandler::NewLine();
    $line .= fs_filehandler::NewLine();

    /*
     * ##############################################################################################################
     * #
     * # All SSL Virtual Host Containers
     * #
     * ##############################################################################################################
     */

    // Sentora virtual host container configuration
    $sql = $zdbh->prepare("SELECT * FROM x_vhosts WHERE vh_deleted_ts IS NULL AND vh_ssl_tx IS NOT NULL");
    $sql->execute();
    while ($rowvhost = $sql->fetch()) {

        // Grab some variables we will use for later...
        $vhostuser = ctrl_users::GetUserDetail($rowvhost['vh_acc_fk']);
        $bandwidth = ctrl_users::GetQuotaUsages('bandwidth', $vhostuser['userid']);
        $diskspace = ctrl_users::GetQuotaUsages('diskspace', $vhostuser['userid']);
        // Set the vhosts to "LIVE"
        $vsql = $zdbh->prepare("UPDATE x_vhosts SET vh_active_in=1 WHERE vh_id_pk=:id");
        $vsql->bindParam(':id', $rowvhost['vh_id_pk']);
        $vsql->execute();

        // Add a default email if no email found for client.
        $useremail = ( fs_director::CheckForEmptyValue($vhostuser['email']) ) ? "postmaster@" . $rowvhost['vh_name_vc'] : $vhostuser['email'];

        // Check if domain or subdomain to see if we add an alias with 'www'
        $serveralias = ( $rowvhost['vh_type_in'] == 2 ) ? '' : " www." . $rowvhost['vh_name_vc'];

        $vhostPort = ( fs_director::CheckForEmptyValue($rowvhost['vh_custom_port_in']) ) ? $VHostDefaultPort : $rowvhost['vh_custom_port_in'];

        $vhostIp = ( fs_director::CheckForEmptyValue($rowvhost['vh_custom_ip_vc']) ) ? "*" : $rowvhost['vh_custom_ip_vc'];

        //Domain is enabled
        //Line1: Domain enabled & Client also is enabled.
        //Line2: Domain enabled & Client may be disabled, but 'Allow Disabled' = 'true' in apache settings.
        if ($rowvhost['vh_enabled_in'] == 1 && ctrl_users::CheckUserEnabled($rowvhost['vh_acc_fk']) ||
            $rowvhost['vh_enabled_in'] == 1 && ctrl_options::GetSystemOption('apache_allow_disabled') == strtolower("true")) {

            /*
             * ##################################################
             * #
             * # Disk Quotas Check
             * #
             * ##################################################
             */

            //Domain is beyond its diskusage
            if ($vhostuser['diskquota'] != 0 && $diskspace > $vhostuser['diskquota']) {
                $line .= "# DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "# THIS DOMAIN HAS BEEN DISABLED FOR QUOTA OVERAGE" . fs_filehandler::NewLine();
                $line .= "<virtualhost " . $vhostIp . ":" . "443" . ">" . fs_filehandler::NewLine();
                $line .= "ServerName " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "ServerAlias www." . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "ServerAdmin " . $useremail . fs_filehandler::NewLine();
                $line .= 'DocumentRoot "' . ctrl_options::GetSystemOption('static_dir') . 'diskexceeded"' . fs_filehandler::NewLine();
                $line .= '<Directory "' . ctrl_options::GetSystemOption('static_dir') . 'diskexceeded">' . fs_filehandler::NewLine();
                $line .= "  Options +FollowSymLinks -Indexes" . fs_filehandler::NewLine();
                $line .= "  AllowOverride All" . fs_filehandler::NewLine();
                $line .= "  Require all granted" . fs_filehandler::NewLine();
                $line .= "</Directory>" . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('php_handler') . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('dir_index') . fs_filehandler::NewLine();
				
				//SSL engine settings
				$line .= "# SSL Engine settings (if any exist)" . fs_filehandler::NewLine();
				$line .= $rowvhost['vh_ssl_tx'] . fs_filehandler::NewLine();
				$line .= "# END SSL Engine settings (if any exist)" . fs_filehandler::NewLine();
				// END SSL engine settings
				
                $line .= "</virtualhost>" . fs_filehandler::NewLine();
                $line .= "# END DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "################################################################" . fs_filehandler::NewLine();
                $line .= fs_filehandler::NewLine();
				/*no longer need forward happens i vhost file not ssl vhost
                if ($rowvhost['vh_portforward_in'] <> 0) {
                    $line .= BuildVhostPortForward($rowvhost['vh_name_vc'], $vhostPort, $useremail);
                }
				*/
                $line .= fs_filehandler::NewLine();
                /*
                 * ##################################################
                 * #
                 * # Bandwidth Quotas Check
                 * #
                 * ##################################################
                 */

                //Domain is beyond its quota
            } elseif ($vhostuser['bandwidthquota'] != 0 && $bandwidth > $vhostuser['bandwidthquota']) {
                $line .= "# DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "# THIS DOMAIN HAS BEEN DISABLED FOR BANDWIDTH OVERAGE" . fs_filehandler::NewLine();
                $line .= "<virtualhost " . $vhostIp . ":" . "443" . ">" . fs_filehandler::NewLine();
                $line .= "ServerName " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "ServerAlias www." . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "ServerAdmin " . $useremail . fs_filehandler::NewLine();
                $line .= 'DocumentRoot "' . ctrl_options::GetSystemOption('static_dir') . 'bandwidthexceeded"' . fs_filehandler::NewLine();
                $line .= '<Directory "' . ctrl_options::GetSystemOption('static_dir') . 'bandwidthexceeded">' . fs_filehandler::NewLine();
                $line .= "  Options +FollowSymLinks -Indexes" . fs_filehandler::NewLine();
                $line .= "  AllowOverride All" . fs_filehandler::NewLine();
                $line .= "  Require all granted" . fs_filehandler::NewLine();
                $line .= "</Directory>" . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('php_handler') . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('dir_index') . fs_filehandler::NewLine();
				
				//SSL engine settings
				$line .= "# SSL Engine settings (if any exist)" . fs_filehandler::NewLine();
				$line .= $rowvhost['vh_ssl_tx'] . fs_filehandler::NewLine();
				$line .= "# END SSL Engine settings (if any exist)" . fs_filehandler::NewLine();
				// END SSL engine settings
				
                $line .= "</virtualhost>" . fs_filehandler::NewLine();
                $line .= "# END DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "################################################################" . fs_filehandler::NewLine();
                $line .= fs_filehandler::NewLine();
				/*no longer need forward happens i vhost file not ssl vhost
                if ($rowvhost['vh_portforward_in'] <> 0) {
                    $line .= BuildVhostPortForward($rowvhost['vh_name_vc'], $vhostPort, $useremail);
                }
				*/
                $line .= fs_filehandler::NewLine();
                /*
                 * ##################################################
                 * #
                 * # Parked Domain
                 * #
                 * ##################################################
                 */

                //Domain is a PARKED domain.
            } elseif ($rowvhost['vh_type_in'] == 3) {
                $line .= "# DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "<virtualhost " . $vhostIp . ":" . "443" . ">" . fs_filehandler::NewLine();
                $line .= "ServerName " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "ServerAlias www." . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "ServerAdmin " . $useremail . fs_filehandler::NewLine();
                $line .= 'DocumentRoot "' . ctrl_options::GetSystemOption('parking_path') . '"' . fs_filehandler::NewLine();
                $line .= '<Directory "' . ctrl_options::GetSystemOption('parking_path') . '">' . fs_filehandler::NewLine();
                $line .= "  Options +FollowSymLinks -Indexes" . fs_filehandler::NewLine();
                $line .= "  AllowOverride All" . fs_filehandler::NewLine();
                $line .= "  Require all granted" . fs_filehandler::NewLine();
                $line .= "</Directory>" . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('php_handler') . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('dir_index') . fs_filehandler::NewLine();
				
				//SSL engine settings
				$line .= "# SSL Engine settings (if any exist)" . fs_filehandler::NewLine();
				$line .= $rowvhost['vh_ssl_tx'] . fs_filehandler::NewLine();
				$line .= "# END SSL Engine settings (if any exist)" . fs_filehandler::NewLine();
				// END SSL engine settings
				
                $line .= "# Custom Global Settings (if any exist)" . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('global_vhcustom') . fs_filehandler::NewLine();
                $line .= "# Custom VH settings (if any exist)" . fs_filehandler::NewLine();
                $line .= $rowvhost['vh_custom_tx'] . fs_filehandler::NewLine();
                $line .= "</virtualhost>" . fs_filehandler::NewLine();
                $line .= "# END DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "################################################################" . fs_filehandler::NewLine();
                $line .= fs_filehandler::NewLine();
				/*no longer need forward happens i vhost file not ssl vhost
                if ($rowvhost['vh_portforward_in'] <> 0) {
                    $line .= BuildVhostPortForward($rowvhost['vh_name_vc'], $vhostPort, $useremail);
                }
				*/
                $line .= fs_filehandler::NewLine();
                /*
                 * ##################################################
                 * #
                 * # Regular or Sub domain
                 * #
                 * ##################################################
                 */

                //Domain is a regular domain or a subdomain.
            } else {
                $RootDir = '"' . ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] . '/public_html' . $rowvhost['vh_directory_vc'] . '"';

                $line .= "# DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "<virtualhost " . $vhostIp . ":" . "443" . ">" . fs_filehandler::NewLine();

                /*
                 * todo
                 */
                // Bandwidth Settings
                //$line .= "Include C:/Sentora/bin/apache/conf/mod_bw/mod_bw/mod_bw_Administration.conf" . fs_filehandler::NewLine();
                // Server name, alias, email settings
                $line .= "ServerName " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                if (!empty($serveralias))
                    $line .= "ServerAlias " . $serveralias . fs_filehandler::NewLine();
                $line .= "ServerAdmin " . $useremail . fs_filehandler::NewLine();
                // Document root

                $line .= 'DocumentRoot ' . $RootDir . fs_filehandler::NewLine();
                // Get Package openbasedir and suhosin enabled options
                if (ctrl_options::GetSystemOption('use_openbase') == "true") {
                    if ($rowvhost['vh_obasedir_in'] <> 0) {
                        $line .= 'php_admin_value open_basedir "' . ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] . "/public_html" . $rowvhost['vh_directory_vc'] . ctrl_options::GetSystemOption('openbase_seperator') . ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] . "/tmp" . ctrl_options::GetSystemOption('openbase_seperator') . ctrl_options::GetSystemOption('openbase_temp') . '"' . fs_filehandler::NewLine();
                    }
                }
                if (ctrl_options::GetSystemOption('use_suhosin') == "true") {
                    if ($rowvhost['vh_suhosin_in'] <> 0) {
                        $line .= ctrl_options::GetSystemOption('suhosin_value') . fs_filehandler::NewLine();

                    }
                }
				
				// Temp
                if ( !is_dir( ctrl_options::GetSystemOption('hosted_dir') . $vhostuser[ 'username' ] . "/tmp" ) ) {
                    fs_director::CreateDirectory( ctrl_options::GetSystemOption( 'hosted_dir' ) . $vhostuser[ 'username' ] . "/tmp" );
                }
				$line .= "	php_admin_value upload_tmp_dir \"" . ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] . "/tmp" . "\"" . fs_filehandler::NewLine();
				$line .= "	php_admin_value session.save_path \"" . ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] . "/tmp" . "\"" . fs_filehandler::NewLine();
				
                // Logs
                if (!is_dir(ctrl_options::GetSystemOption('log_dir_domain') . "domains/" . $vhostuser['username'] . "/")) {
                    fs_director::CreateDirectory(ctrl_options::GetSystemOption('log_dir_domain') . "domains/" . $vhostuser['username'] . "/");
                }
                $line .= 'ErrorLog "' . ctrl_options::GetSystemOption('log_dir_domain') . "domains/" . $vhostuser['username'] . "/" . $rowvhost['vh_name_vc'] . '-error.log" ' . fs_filehandler::NewLine();
                $line .= 'CustomLog "' . ctrl_options::GetSystemOption('log_dir_domain') . "domains/" . $vhostuser['username'] . "/" . $rowvhost['vh_name_vc'] . '-access.log" ' . ctrl_options::GetSystemOption('access_log_format') . fs_filehandler::NewLine();
                $line .= 'CustomLog "' . ctrl_options::GetSystemOption('log_dir_domain') . "domains/" . $vhostuser['username'] . "/" . $rowvhost['vh_name_vc'] . '-bandwidth.log" ' . ctrl_options::GetSystemOption('bandwidth_log_format') . fs_filehandler::NewLine();

                // Directory options
                $line .= '<Directory ' . $RootDir . '>' . fs_filehandler::NewLine();
                $line .= "  Options +FollowSymLinks -Indexes" . fs_filehandler::NewLine();
                $line .= "  AllowOverride All" . fs_filehandler::NewLine();
                $line .= "  Require all granted" . fs_filehandler::NewLine();
                $line .= "</Directory>" . fs_filehandler::NewLine();

                // Get Package php and cgi enabled options
                $rows = $zdbh->prepare("SELECT * FROM x_packages WHERE pk_id_pk=:packageid AND pk_deleted_ts IS NULL");
                $rows->bindParam(':packageid', $vhostuser['packageid']);
                $rows->execute();
                $packageinfo = $rows->fetch();
                if ($packageinfo['pk_enablephp_in'] <> 0) {
                    $line .= ctrl_options::GetSystemOption('php_handler') . fs_filehandler::NewLine();
                }
# curently disabled because un secure
# need correct cleaning in interface for full removal or in comment here until restoration
#                if ( $packageinfo[ 'pk_enablecgi_in' ] <> 0 ) {
#                     $line .= ctrl_options::GetSystemOption( 'cgi_handler' ) . fs_filehandler::NewLine();
#                     if ( !is_dir( ctrl_options::GetSystemOption( 'hosted_dir' ) . $vhostuser[ 'username' ] . "/public_html" . $rowvhost[ 'vh_directory_vc' ] . "/_cgi-bin" ) ) {
#                         fs_director::CreateDirectory( ctrl_options::GetSystemOption( 'hosted_dir' ) . $vhostuser[ 'username' ] . "/public_html" . $rowvhost[ 'vh_directory_vc' ] . "/_cgi-bin" );
#                     }
#                 }
                // Error documents:- Error pages are added automatically if they are found in the _errorpages directory
                // and if they are a valid error code, and saved in the proper format, i.e. <error_number>.html
                $errorpages = ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] . "/public_html" . $rowvhost['vh_directory_vc'] . "/_errorpages";
                if (is_dir($errorpages)) {
                    if ($handle = opendir($errorpages)) {
                        while (($file = readdir($handle)) !== false) {
                            if ($file != "." && $file != "..") {
                                $page = explode(".", $file);
                                if (!fs_director::CheckForEmptyValue(CheckErrorDocument($page[0]))) {
                                    $line .= "ErrorDocument " . $page[0] . " /_errorpages/" . $page[0] . ".html" . fs_filehandler::NewLine();
                                }
                            }
                        }
                        closedir($handle);
                    }
                }
				
				
				//SSL engine settings
				$line .= "# SSL Engine settings (if any exist)" . fs_filehandler::NewLine();
				$line .= $rowvhost['vh_ssl_tx'] . fs_filehandler::NewLine();
				$line .= "# END SSL Engine settings (if any exist)" . fs_filehandler::NewLine();
				// END SSL engine settings
				
                // Directory indexes
                $line .= ctrl_options::GetSystemOption('dir_index') . fs_filehandler::NewLine();

                // Global custom global vh entry
                $line .= "# Custom Global Settings (if any exist)" . fs_filehandler::NewLine();
                $line .= ctrl_options::GetSystemOption('global_vhcustom') . fs_filehandler::NewLine();

                // Client custom vh entry
                $line .= "# Custom VH settings (if any exist)" . fs_filehandler::NewLine();
                $line .= $rowvhost['vh_custom_tx'] . fs_filehandler::NewLine();

                // End Virtual Host Settings
                $line .= "</virtualhost>" . fs_filehandler::NewLine();
                $line .= "# END DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
                $line .= "################################################################" . fs_filehandler::NewLine();
                $line .= fs_filehandler::NewLine();
				
				/* removed because it is not longer needed on ssl vhost file. forward happens on vhost files
                if ($rowvhost['vh_portforward_in'] <> 0) {
                    $line .= BuildVhostPortForward($rowvhost['vh_name_vc'], $vhostPort, $useremail);
                }
				*/
                $line .= fs_filehandler::NewLine();
            }

            /*
             * ##################################################
             * #
             * # Disabled domain
             * #
             * ##################################################
             */
        } else {
            //Domain is NOT enabled
            $line .= "# DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
            $line .= "# THIS DOMAIN HAS BEEN DISABLED" . fs_filehandler::NewLine();
            $line .= "<virtualhost " . $vhostIp . ":" . "443" . ">" . fs_filehandler::NewLine();
            $line .= "ServerName " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
            $line .= "ServerAlias www." . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
            $line .= "ServerAdmin " . $useremail . fs_filehandler::NewLine();
            $line .= 'DocumentRoot "' . ctrl_options::GetSystemOption('static_dir') . 'disabled"' . fs_filehandler::NewLine();
            $line .= '<Directory "' . ctrl_options::GetSystemOption('static_dir') . 'disabled">' . fs_filehandler::NewLine();
            $line .= "  Options +FollowSymLinks -Indexes" . fs_filehandler::NewLine();
            $line .= "  AllowOverride All" . fs_filehandler::NewLine();
            $line .= "  Require all granted" . fs_filehandler::NewLine();
            $line .= "</Directory>" . fs_filehandler::NewLine();
            $line .= ctrl_options::GetSystemOption('dir_index') . fs_filehandler::NewLine();
			
			//SSL engine settings
			$line .= "# SSL Engine settings (if any exist)" . fs_filehandler::NewLine();
			$line .= $rowvhost['vh_ssl_tx'] . fs_filehandler::NewLine();
			$line .= "# END SSL Engine settings (if any exist)" . fs_filehandler::NewLine();
			// END SSL engine settings
			
            $line .= "</virtualhost>" . fs_filehandler::NewLine();
            $line .= "# END DOMAIN: " . $rowvhost['vh_name_vc'] . fs_filehandler::NewLine();
            $line .= "################################################################" . fs_filehandler::NewLine();
        }
    }

    /*
     * ##############################################################################################################
     * #
     * # Write SSL vhost file to disk
     * #
     * ##############################################################################################################
     */

 // write the sslvhost config file
    $vhsslconfigfile = ctrl_options::GetSystemOption('apache_ssl_vhost');
	
	//Backup old vhost file in folder incase apache config fails we can roll back
	//$backupsslfile = "/mnt/nfs/www/configs/apache/httpd-vhosts-ssl.bak.conf";

	//if (!copy($vhsslconfigfile, $backupsslfile)) {
   	 	//echo "failed to backup Apache SSL Vhost file" . fs_filehandler::NewLine();
	//}
	
	//start write
    if (fs_filehandler::UpdateFile($vhsslconfigfile, 0777, $line)) {
        // Reset Apache settings to reflect that config file has been written, until the next change.
        $time = time();
        $vsql = $zdbh->prepare("UPDATE x_settings
                                    SET so_value_tx=:time
                                    WHERE so_name_vc='apache_changed'");
        $vsql->bindParam(':time', $time);
        $vsql->execute();
        echo "Finished writing Apache SSL Config... Now reloading Apache..." . fs_filehandler::NewLine();
        $returnValue = 0;
        if (sys_versions::ShowOSPlatformVersion() == "Windows") {
            system("" . ctrl_options::GetSystemOption('httpd_exe') . " " . ctrl_options::GetSystemOption('apache_restart') . "", $returnValue);
        } else {
            $command = ctrl_options::GetSystemOption('zsudo');
            $args = array(
                "service",
                ctrl_options::GetSystemOption('apache_sn'),
                ctrl_options::GetSystemOption('apache_restart')
            );
            $returnValue = ctrl_system::systemCommand($command, $args);
        }
        echo "Apache reload " . ((0 === $returnValue ) ? "succeeded" : "failed") . "." . fs_filehandler::NewLine();
    } else {
        return false;
    }


}


function CheckErrorDocument($error)
{
    $errordocs = array(100, 101, 102, 200, 201, 202, 203, 204, 205, 206, 207,
        300, 301, 302, 303, 304, 305, 306, 307, 400, 401, 402,
        403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413,
        414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424,
        425, 426, 500, 501, 502, 503, 504, 505, 506, 507, 508,
        509, 510);
    if (in_array($error, $errordocs)) {
        return true;
    } else {
        return false;
    }
}

function BackupVhostConfigFile()
{
    echo "Apache VHost backups are enabled... Backing up current vhost.conf to: " . ctrl_options::GetSystemOption('apache_budir') . fs_filehandler::NewLine();
    if (!is_dir(ctrl_options::GetSystemOption('apache_budir'))) {
        fs_director::CreateDirectory(ctrl_options::GetSystemOption('apache_budir'));
    }
    copy(ctrl_options::GetSystemOption('apache_vhost'), ctrl_options::GetSystemOption('apache_budir') . "VHOST_BACKUP_" . time());
    fs_director::SetFileSystemPermissions(ctrl_options::GetSystemOption('apache_budir') . ctrl_options::GetSystemOption('apache_vhost') . ".BU", 0777);
    if (ctrl_options::GetSystemOption('apache_purgebu') == strtolower("true")) {
        echo "Apache VHost purges are enabled... Purging backups older than: " . ctrl_options::GetSystemOption('apache_purge_date') . " days..." . fs_filehandler::NewLine();
        echo "[FILE][PURGE_DATE][FILE_DATE][ACTION]" . fs_filehandler::NewLine();
        $purge_date = ctrl_options::GetSystemOption('apache_purge_date');
        if ($handle = @opendir(ctrl_options::GetSystemOption('apache_budir'))) {
            while (false !== ($file = readdir($handle))) {
                if ($file != "." && $file != "..") {
                    $filetime = @filemtime(ctrl_options::GetSystemOption('apache_budir') . $file);

                    if ($filetime == NULL) {
                        $filetime = @filemtime(utf8_decode(ctrl_options::GetSystemOption('apache_budir') . $file));
                    }
                    $filetime = floor((time() - $filetime) / 86400);
                    echo $file . " - " . $purge_date . " - " . $filetime . "";
                    if ($purge_date < $filetime) {
                        //delete the file
                        echo " - Deleting file..." . fs_filehandler::NewLine();
                        unlink(ctrl_options::GetSystemOption('apache_budir') . $file);
                    } else {
                        echo " - Skipping file..." . fs_filehandler::NewLine();
                    }
                }
            }
        }
        echo "Purging old backups complete..." . fs_filehandler::NewLine();
    }
    echo "Apache backups complete..." . fs_filehandler::NewLine();
}

function BackupSslVhostConfigFile()
{
    echo "Apache VHost backups are enabled... Backing up current sslvhost.conf to: " . ctrl_options::GetSystemOption('apache_budir') . fs_filehandler::NewLine();
    if (!is_dir(ctrl_options::GetSystemOption('apache_budir'))) {
        fs_director::CreateDirectory(ctrl_options::GetSystemOption('apache_budir'));
    }
    copy(ctrl_options::GetSystemOption('apache_ssl_vhost'), ctrl_options::GetSystemOption('apache_budir') . "SSL_VHOST_BACKUP_" . time());
    fs_director::SetFileSystemPermissions(ctrl_options::GetSystemOption('apache_budir') . ctrl_options::GetSystemOption('apache_ssl_vhost') . ".BU", 0777);
    if (ctrl_options::GetSystemOption('apache_purgebu') == strtolower("true")) {
        echo "Apache VHost purges are enabled... Purging backups older than: " . ctrl_options::GetSystemOption('apache_purge_date') . " days..." . fs_filehandler::NewLine();
        echo "[FILE][PURGE_DATE][FILE_DATE][ACTION]" . fs_filehandler::NewLine();
        $purge_date = ctrl_options::GetSystemOption('apache_purge_date');
        if ($handle = @opendir(ctrl_options::GetSystemOption('apache_budir'))) {
            while (false !== ($file = readdir($handle))) {
                if ($file != "." && $file != "..") {
                    $filetime = @filemtime(ctrl_options::GetSystemOption('apache_budir') . $file);
                    if ($filetime == NULL) {
                        $filetime = @filemtime(utf8_decode(ctrl_options::GetSystemOption('apache_budir') . $file));
                    }
                    $filetime = floor((time() - $filetime) / 86400);
                    echo $file . " - " . $purge_date . " - " . $filetime . "";
                    if ($purge_date < $filetime) {
                        //delete the file
                        echo " - Deleting file..." . fs_filehandler::NewLine();
                        unlink(ctrl_options::GetSystemOption('apache_budir') . $file);
                    } else {
                        echo " - Skipping file..." . fs_filehandler::NewLine();
                    }
                }
            }
        }
        echo "Purging old backups complete..." . fs_filehandler::NewLine();
    }
    echo "Apache backups complete..." . fs_filehandler::NewLine();
}


function TriggerApacheQuotaUsage()
{
    global $zdbh;
    global $controller;
    $sql = $zdbh->prepare("SELECT * FROM x_vhosts WHERE vh_deleted_ts IS NULL");
    $sql->execute();
    while ($rowvhost = $sql->fetch()) {
        if ($rowvhost['vh_enabled_in'] == 1 && ctrl_users::CheckUserEnabled($rowvhost['vh_acc_fk']) ||
            $rowvhost['vh_enabled_in'] == 1 && ctrl_options::GetSystemOption('apache_allow_disabled') == strtolower("true")) {

            //$checksize = $zdbh->query("SELECT * FROM x_bandwidth WHERE bd_month_in = " . date("Ym") . " AND bd_acc_fk = " . $rowvhost['vh_acc_fk'] . "")->fetch();

            $date = date("Ym");
            $findsize = $zdbh->prepare("SELECT * FROM x_bandwidth WHERE bd_month_in = :date AND bd_acc_fk = :acc");
            $findsize->bindParam(':date', $date);
            $findsize->bindParam(':acc', $rowvhost['vh_acc_fk']);
            $findsize->execute();
            $checksize = $findsize->fetch();

            $currentuser = ctrl_users::GetUserDetail($rowvhost['vh_acc_fk']);
            if ($checksize['bd_diskover_in'] != $checksize['bd_diskcheck_in'] && $checksize['bd_diskover_in'] == 1) {
                echo "Disk usage over quota, triggering Apache..." . fs_filehandler::NewLine();
                $updateapache = $zdbh->prepare("UPDATE x_settings SET so_value_tx = 'true' WHERE so_name_vc ='apache_changed'");
                $updateapache->execute();

                //$updateapache = $zdbh->query("UPDATE x_bandwidth SET bd_diskcheck_in = 1 WHERE bd_acc_fk =" . $rowvhost['vh_acc_fk'] . "");
                $updateapache2 = $zdbh->prepare("UPDATE x_bandwidth SET bd_diskcheck_in = 1 WHERE bd_acc_fk = :acc");
                $updateapache2->bindParam(':acc', $rowvhost['vh_acc_fk']);
                $updateapache2->execute();
            }
            if ($checksize['bd_diskover_in'] != $checksize['bd_diskcheck_in'] && $checksize['bd_diskover_in'] == 0) {
                echo "Disk usage under quota, triggering Apache..." . fs_filehandler::NewLine();
                $updateapache = $zdbh->prepare("UPDATE x_settings SET so_value_tx = 'true' WHERE so_name_vc ='apache_changed'");
                $updateapache->execute();

                //$updateapache = $zdbh->query("UPDATE x_bandwidth SET bd_diskcheck_in = 0 WHERE bd_acc_fk =" . $rowvhost['vh_acc_fk'] . "");
                $updateapache2 = $zdbh->prepare("UPDATE x_bandwidth SET bd_diskcheck_in = 0 WHERE bd_acc_fk = :acc");
                $updateapache2->bindParam(':acc', $rowvhost['vh_acc_fk']);
                $updateapache2->execute();
            }
            if ($checksize['bd_transover_in'] != $checksize['bd_transcheck_in'] && $checksize['bd_transover_in'] == 1) {
                echo "Bandwidth usage over quota, triggering Apache..." . fs_filehandler::NewLine();
                $updateapache = $zdbh->prepare("UPDATE x_settings SET so_value_tx = 'true' WHERE so_name_vc ='apache_changed'");
                $updateapache->execute();

                //$updateapache = $zdbh->query("UPDATE x_bandwidth SET bd_transcheck_in = 1 WHERE bd_acc_fk =" . $rowvhost['vh_acc_fk'] . "");
                $updateapache2 = $zdbh->prepare("UPDATE x_bandwidth SET bd_transcheck_in = 1 WHERE bd_acc_fk = :acc");
                $updateapache2->bindParam(':acc', $rowvhost['vh_acc_fk']);
                $updateapache2->execute();
            }
            if ($checksize['bd_transover_in'] != $checksize['bd_transcheck_in'] && $checksize['bd_transover_in'] == 0) {
                echo "Bandwidth usage under quota, triggering Apache..." . fs_filehandler::NewLine();
                $updateapache = $zdbh->prepare("UPDATE x_settings SET so_value_tx = 'true' WHERE so_name_vc ='apache_changed'");
                $updateapache->execute();

                //$updateapache = $zdbh->query("UPDATE x_bandwidth SET bd_transcheck_in = 0 WHERE bd_acc_fk =" . $rowvhost['vh_acc_fk'] . "");
                $updateapache2 = $zdbh->prepare("UPDATE x_bandwidth SET bd_transcheck_in = 0 WHERE bd_acc_fk = :acc");
                $updateapache2->bindParam(':acc', $rowvhost['vh_acc_fk']);
                $updateapache2->execute();
            }
        }
    }
}


/*

//script to create Haproxy Config file and restart system
function WriteHaproxyConfig(){
	
	global $zdbh;
	
	$stylespacing = "        ";

	$line = fs_filehandler::NewLine();
    $line .= "global" . fs_filehandler::NewLine();
    $line .= $stylespacing ."log /dev/log    local0" . fs_filehandler::NewLine();
    $line .= $stylespacing ."log /dev/log    local1 notice" . fs_filehandler::NewLine();
    $line .= $stylespacing ."chroot /var/lib/haproxy" . fs_filehandler::NewLine();
    $line .= $stylespacing ."stats socket /run/haproxy/admin.sock mode 660 level admin" . fs_filehandler::NewLine();
    $line .= $stylespacing ."stats timeout 30s" . fs_filehandler::NewLine();
    $line .= $stylespacing ."user haproxy" . fs_filehandler::NewLine();
    $line .= $stylespacing ."group haproxy" . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine();
	
    $line .= $stylespacing ."# Default SSL material locations" . fs_filehandler::NewLine();
    $line .= $stylespacing ."ca-base /etc/ssl/certs" . fs_filehandler::NewLine();
    $line .= $stylespacing ."crt-base /etc/ssl/private" . fs_filehandler::NewLine();
	$line .= $stylespacing ."tune.ssl.default-dh-param 1024" . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine();
	
    $line .= $stylespacing ."# Default ciphers to use on SSL-enabled listening sockets." . fs_filehandler::NewLine();
    $line .= $stylespacing ."# For more information, see ciphers(1SSL). This list is from:" . fs_filehandler::NewLine();
    $line .= $stylespacing ."#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/" . fs_filehandler::NewLine();
    $line .= $stylespacing ."ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS" . fs_filehandler::NewLine();
    $line .= $stylespacing ."ssl-default-bind-options no-sslv3" . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine();
	
    $line .= "defaults" . fs_filehandler::NewLine();
    $line .= $stylespacing ."log     global" . fs_filehandler::NewLine();
    $line .= $stylespacing ."mode    http" . fs_filehandler::NewLine();
	$line .= $stylespacing ."option forwardfor" . fs_filehandler::NewLine();
	$line .= $stylespacing ."option http-server-close" . fs_filehandler::NewLine();
    $line .= $stylespacing ."option  httplog" . fs_filehandler::NewLine();
    $line .= $stylespacing ."option  dontlognull" . fs_filehandler::NewLine();
    $line .= $stylespacing ."timeout connect 5000" . fs_filehandler::NewLine();
    $line .= $stylespacing ."timeout client  50000" . fs_filehandler::NewLine();
    $line .= $stylespacing ."timeout server  50000" . fs_filehandler::NewLine();
	$line .= $stylespacing ."errorfile 400 /etc/haproxy/errors/400.http" . fs_filehandler::NewLine();
    $line .= $stylespacing ."errorfile 403 /etc/haproxy/errors/403.http" . fs_filehandler::NewLine();
    $line .= $stylespacing ."errorfile 408 /etc/haproxy/errors/408.http" . fs_filehandler::NewLine();
    $line .= $stylespacing ."errorfile 500 /etc/haproxy/errors/500.http" . fs_filehandler::NewLine();
    $line .= $stylespacing ."errorfile 502 /etc/haproxy/errors/502.http" . fs_filehandler::NewLine();
    $line .= $stylespacing ."errorfile 503 /etc/haproxy/errors/503.http" . fs_filehandler::NewLine();
    $line .= $stylespacing ."errorfile 504 /etc/haproxy/errors/504.http" . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine();
	
	$line .= "listen STATS" . fs_filehandler::NewLine();
    $line .= $stylespacing ."bind  *:8080" . fs_filehandler::NewLine();
    $line .= $stylespacing ."stats enable" . fs_filehandler::NewLine();
    $line .= $stylespacing ."stats refresh 10s" . fs_filehandler::NewLine();
    $line .= $stylespacing ."stats uri /haproxy?stats" . fs_filehandler::NewLine();
    $line .= $stylespacing ."stats realm Strictly\ Private" . fs_filehandler::NewLine();
    $line .= $stylespacing ."stats auth dcsadmin:Jettagl1985" . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine();
	
    $line .= "listen FTP" . fs_filehandler::NewLine();
	$line .= $stylespacing ."bind *:21,*:60000-65535" . fs_filehandler::NewLine();
    $line .= $stylespacing ."mode http" . fs_filehandler::NewLine();
    $line .= $stylespacing ."option forwardfor" . fs_filehandler::NewLine();
    $line .= $stylespacing ."server ftp01 10.1.11.163:21 check" . fs_filehandler::NewLine();
    $line .= $stylespacing ."server ftp02 10.1.11.165:21 check backup" . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine();
	
	$line .= "listen MySQL" . fs_filehandler::NewLine();
	$line .= $stylespacing ."bind 0.0.0.0:3306" . fs_filehandler::NewLine();
    $line .= $stylespacing ."mode tcp" . fs_filehandler::NewLine();
    $line .= $stylespacing ."option tcplog" . fs_filehandler::NewLine();
    $line .= $stylespacing ."balance roundrobin" . fs_filehandler::NewLine();
    $line .= $stylespacing ."server Zpanel-MySQL-Local 10.1.11.63:3306 check" . fs_filehandler::NewLine();
	$line .= $stylespacing ."server Zpanel-MySQL2-Local 10.1.9.63:3306 check backup" . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine();
	
	$line .= "frontend HTTP_WEB" . fs_filehandler::NewLine();
	$line .= $stylespacing ."bind *:80" . fs_filehandler::NewLine();
	$line .= $stylespacing ."bind *:443 ssl crt /mnt/nfs/www/configs/haproxy/certs" . fs_filehandler::NewLine();
    $line .= $stylespacing ."#compression algo gzip" . fs_filehandler::NewLine();
    $line .= $stylespacing ."#compression type text/html text/plain text/javascript application/javascript application/xml text/css" . fs_filehandler::NewLine();
    $line .= $stylespacing ."#option http-server-close" . fs_filehandler::NewLine();
    $line .= $stylespacing ."default_backend Apache" . fs_filehandler::NewLine();
	
	$line .= fs_filehandler::NewLine();
	
	//add default ACL with SNI
	$line .= $stylespacing ."acl cp_dukecitysolutions_com hdr_beg(host) -i cp.dukecitysolutions.com" . fs_filehandler::NewLine();
	$line .= $stylespacing ."use_backend Apache if cp_dukecitysolutions_com" . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine();
	
	$line .= $stylespacing ."acl mail_dukecitysolutions_com hdr_beg(host) -i mail.dukecitysolutions.com" . fs_filehandler::NewLine();
	$line .= $stylespacing ."use_backend Apache if mail_dukecitysolutions_com" . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine();
	
	//If there are ssl enabled site make farm for domains
	// Sentora virtual host container configuration
    $sql = $zdbh->prepare("SELECT * FROM x_vhosts WHERE vh_deleted_ts IS NULL and vh_ssl_tx IS NOT NULL");
    $sql->execute();
    while ($rowvhost = $sql->fetch()) {
		//Set values
	//$username = $rowvhost['vh_name_vc'];
	//$target_dir = ctrl_options::GetSystemOption('hosted_dir') . $vhostuser['username'] ."/ssl/". $rootdir ."/";#fix this
	$domain = $rowvhost['vh_name_vc'];
	$rootdir = str_replace('.', '_', $domain);
		
	//if ($test == 0) {
	
	//Start ACL for SNI for HTTPS redirecting
	$line .= $stylespacing ."acl ". $rootdir ." hdr_beg(host) -i " .$domain. fs_filehandler::NewLine();
	$line .= $stylespacing ."use_backend Apache if ". $rootdir . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine(); 

	} 
	
	$line .= fs_filehandler::NewLine();
	
	$line .= "backend Apache" . fs_filehandler::NewLine();
	$line .= $stylespacing ."mode http" . fs_filehandler::NewLine();
    $line .= $stylespacing ."balance roundrobin" . fs_filehandler::NewLine();
    $line .= $stylespacing ."option persist" . fs_filehandler::NewLine();
    $line .= $stylespacing ."option redispatch" . fs_filehandler::NewLine();
    $line .= $stylespacing ."option httpchk HEAD / HTTP/1.1\\r\\r\\nHost:\\ localhost" . fs_filehandler::NewLine();
	$line .= $stylespacing ."http-check disable-on-404" . fs_filehandler::NewLine();
	$line .= $stylespacing ."option forwardfor" . fs_filehandler::NewLine();
	$line .= $stylespacing ."#option forwardfor except 127.0.0.1" . fs_filehandler::NewLine();
    $line .= $stylespacing ."option http-server-close" . fs_filehandler::NewLine();
	$line .= $stylespacing ."http-request set-header X-Forwarded-Port %[dst_port]" . fs_filehandler::NewLine();
	$line .= $stylespacing ."http-request add-header X-Forwarded-proto https if { ssl_fc }" . fs_filehandler::NewLine();
	
    $line .= $stylespacing ."#server HTTP-LINUX-LOCAL 10.1.11.161:80 cookie s1 check observe layer7 inter 1500 rise 1 fall 2" . fs_filehandler::NewLine();
    $line .= $stylespacing ."server HTTP-LINUX-TEST-LOCAL 10.1.11.163:80 cookie s1 check observe layer7 inter 1500 rise 1 fall 2" . fs_filehandler::NewLine();
    $line .= $stylespacing ."server HTTP-LINUX-TEST2-LOCAL 10.1.11.165:80 cookie s1 check observe layer7 inter 1500 rise 1 fall 2" . fs_filehandler::NewLine();
	$line .= $stylespacing ."#server HTTPDC1-Local 10.1.11.10:80 cookie s1 check observe layer7 inter 1500 rise 1 fall 2 backup" . fs_filehandler::NewLine();
	$line .= $stylespacing ."#server HTTPWEB2-Local 10.1.11.20:80 cookie s1 check observe layer7 inter 1500 rise 1 fall 2 backup" . fs_filehandler::NewLine();
    $line .= $stylespacing ."#server HTTPWEB3-Local 10.1.11.21:80 check observe layer7 inter 1500 rise 1 fall 2 backup" . fs_filehandler::NewLine();
    $line .= $stylespacing ."#server HTTPWEB4-Local 10.1.11.22:80 cookie s2 check observe layer7 inter 1500 rise 1 fall 2" . fs_filehandler::NewLine();
    $line .= $stylespacing ."#server HTTPDC2-Remote 10.1.9.10:80 check observe layer7 inter 1500 rise 1 fall 2 backup" . fs_filehandler::NewLine();
    $line .= $stylespacing ."#server HTTPWEB6-Remote 10.1.9.21:80 check observe layer7 inter 1500 rise 1 fall 2 backup" . fs_filehandler::NewLine();
	$line .= $stylespacing ."#server HTTPWEB7-Remote 10.1.9.22:80 check observe layer7 inter 1500 rise 1 fall 2 backup" . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine();
	
	$line .= "frontend Mail-SMTP" . fs_filehandler::NewLine();
	$line .= $stylespacing ."bind *:25" . fs_filehandler::NewLine();
    $line .= $stylespacing ."mode tcp" . fs_filehandler::NewLine();
    $line .= $stylespacing ."log global" . fs_filehandler::NewLine();
    $line .= $stylespacing ."option tcplog" . fs_filehandler::NewLine();
    $line .= $stylespacing ."timeout client 3600s" . fs_filehandler::NewLine();
	$line .= $stylespacing ."backlog 4096" . fs_filehandler::NewLine();
    $line .= $stylespacing ."maxconn 50000" . fs_filehandler::NewLine();
    $line .= $stylespacing ."default_backend Hmail-SMTP" . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine();
	
	$line .= "backend Hmail-SMTP" . fs_filehandler::NewLine();
	$line .= $stylespacing ."mode tcp" . fs_filehandler::NewLine();
    $line .= $stylespacing ."option log-health-checks" . fs_filehandler::NewLine();
    $line .= $stylespacing ."option redispatch" . fs_filehandler::NewLine();
    $line .= $stylespacing ."option tcplog" . fs_filehandler::NewLine();
    $line .= $stylespacing ."balance roundrobin" . fs_filehandler::NewLine();
	$line .= $stylespacing ."server Zpanel-Hmail-Local 10.1.11.62:25 check" . fs_filehandler::NewLine();
    $line .= $stylespacing ."server Zpanel-Hmail2-Remote 10.1.9.62:25 check backup" . fs_filehandler::NewLine();
	$line .= fs_filehandler::NewLine();
	
	
// write the Haproxy config file
    $haproxyconfigfile = "/mnt/nfs/www/configs/haproxy/haproxy.cfg";
	//Backup old vhost file in folder incase apache config fails we can roll back
	$backuphaproxyfile = "/mnt/nfs/www/configs/haproxy/haproxy_bak.cfg";

	if (!copy($haproxyconfigfile, $backuphaproxyfile)) {
   	 	echo "failed to backup Haproxy Config file" . fs_filehandler::NewLine();
	}
	//start write
    if (fs_filehandler::UpdateFile($haproxyconfigfile, 0777, $line)) {
        //Copy Haproxy conf file to haproxy server
		$connection = ssh2_connect('10.1.11.4', 22);
		ssh2_auth_password($connection, 'root', 'Jettagl1985');

		ssh2_scp_send($connection, "/mnt/nfs/www/configs/haproxy/haproxy.cfg", "/etc/haproxy/haproxy.cfg", 0755);
		
        echo "Finished writting Haproxy Config... Now Restart Haproxy Service..." . fs_filehandler::NewLine();

		$stream = ssh2_exec($connection, '/etc/init.d/haproxy reload');
		$errorStream = ssh2_fetch_stream($stream, SSH2_STREAM_STDERR);
		
		stream_set_blocking($errorStream, true);
		stream_set_blocking($stream, true);
		
		echo "Output: " . stream_get_contents($stream);
		echo "Error: " . stream_get_contents($errorStream);
		
		unset($connection);
/*
        $returnValue = 0;

        if (sys_versions::ShowOSPlatformVersion() == "Windows") {
            system("" . ctrl_options::GetSystemOption('httpd_exe') . " " . ctrl_options::GetSystemOption('apache_restart') . "", $returnValue);
        } else {
			
			
			
			//if Apache config successed echo below
			
			
				//restart service
			//echo "Finished ApacheConfigtest... Now reloading Apache..." . fs_filehandler::NewLine();
            $command = ctrl_options::GetSystemOption('zsudo');
            $args = array(
                "service",
                "haproxy",
                "reload"
            );
            $returnValue = ctrl_system::systemCommand($command, $args);
			
        	echo "Haproxy reload " . ((0 === $returnValue ) ? "suceeded" : "failed") . "." . fs_filehandler::NewLine();
    				
			} 
			
		return false;	
	}
}

function RestartRemoteServers () {
	//Restart apache on remote servers
		

		echo  fs_filehandler::NewLine();
        echo "Now Restarting Remote Servers ... Now Restart Apache Service..." . fs_filehandler::NewLine();

		
		//Grab Serving server local ip
		//$serverip = getHostByName(getHostName());
		
		$host= gethostname();
		$serverip = "10.1.11.163";
		echo "this is your local host name: ".$host . fs_filehandler::NewLine();
		echo "this is your local IP: " .$serverip . fs_filehandler::NewLine();
		$server1 = "10.1.11.163";
		$server2 = "10.1.11.165";

		if ($serverip == $server1) { 
		echo "Restarting Remote Server: ".$server2." Now...". fs_filehandler::NewLine();
		
		//ssh connect settings
		$connection2 = ssh2_connect($server2, 22);
		ssh2_auth_password($connection2, 'root', 'Jettagl1985');
		$stream2 = ssh2_exec($connection2, '/etc/init.d/apache2 reload');
		$errorStream2 = ssh2_fetch_stream($stream2, SSH2_STREAM_STDERR);
		
		stream_set_blocking($errorStream2, true);
		stream_set_blocking($stream2, true);
		
		echo "Output: " . stream_get_contents($stream2) . fs_filehandler::NewLine();
		echo "Error: " . stream_get_contents($errorStream2) . fs_filehandler::NewLine();
		
		unset($connection2);
		
		} elseif ($serverip == $server2){
			echo "Restarting Remote Server: ".$server1." Now...". fs_filehandler::NewLine();
			
			//ssh connect settings
		$connection3 = ssh2_connect($server1, 22);
		ssh2_auth_password($connection3, 'root', 'Jettagl1985');
		$stream3 = ssh2_exec($connection3, '/etc/init.d/apache2 reload');
		$errorStream3 = ssh2_fetch_stream($stream3, SSH2_STREAM_STDERR);
		
		stream_set_blocking($errorStream3, true);
		stream_set_blocking($stream3, true);
		
		echo "Output: " . stream_get_contents($stream3) . fs_filehandler::NewLine();
		echo "Error: " . stream_get_contents($errorStream3) . fs_filehandler::NewLine();
		
		unset($connection3);
		}
		
		echo "Finished Restarting Remote Servers ..." . fs_filehandler::NewLine();
}

*/
?>
